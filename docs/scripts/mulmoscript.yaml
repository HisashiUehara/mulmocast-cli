$mulmocast:
  version: "1.0"
beats:
  - text: |
      MulmoScript is a scripting language for creating multi-modal presentations.
      It plays a key role in MulmoCast, a multi-modal presentation platform.
    image:
      type: markdown
      markdown: "# MulmoScript"
    textSlideParams:
      cssStyles: "h1 { margin-top: 340px }"
  - text: |
      MulmoScript is the equivalent of a movie script.
      Just like a movie director creates a movie from a script, 
      MulmoCast creates a presentation from a MulmoScript.
      The presentation can be a video, a podcast, a PDF document, a slide-show, or other formats.
    image:
      type: mermaid
      title: "Role of MulmoScript"
      code:
        kind: text
        text: |
          flowchart TD
          MulmoScript --> MulmoCast["MulmoCast"]
          MulmoCast --> O_Video("Video") & O_Podcast("Podcast") & O_PDF("PDF Document") & O_Slideshow("Slide-Show") & O_Manga("Manga") & O_SwipeAnime("Swipe Anime")
          MulmoCast@{ shape: hex}
          O_Video:::ScriptOutput
          O_Podcast:::ScriptOutput
          O_Slideshow:::ScriptOutput
          O_PDF:::ScriptOutput
          O_Manga:::ScriptOutput
          O_SwipeAnime:::ScriptOutput
          classDef ScriptOutput stroke-width:1px, stroke-dasharray:none, stroke:#FBB35A, fill:#FFEFDB, color:#8F632D
  - text: |
      A MulmoScript can be hand written using a text editor, 
      but also can be generated by AI Chat, such as ChatGPT or Claude.
      We also offer a tool called MulmoTool, 
      which analyzes webpages, PDF documents, storyboards, videos and other media
      and converts them into MulmoScripts.
    image:
      type: mermaid
      title: "Generating MulmoScript"
      code:
        kind: text
        text: |
          flowchart TD
          S_WebPage("Web Page") --> S_Tool
          S_PDF("PDF Document") --> S_Tool
          S_Storyboard("Storyboard") --> S_Tool
          S_Video("Video") --> S_Tool
          S_TextEditor("Text Editor") --> MulmoScript("MulmoScript")
          S_LLM("ChatGPT/Claude") --> MulmoScript
          S_Tool("MulmoTool") --> MulmoScript
          S_Tool@{ shape: hex}
          S_TextEditor:::ScriptInput
          S_LLM:::ScriptInput
          S_Tool:::ScriptInput
          S_WebPage:::StoryInput
          S_PDF:::StoryInput
          S_Storyboard:::StoryInput
          S_Video:::StoryInput
          classDef StoryInput stroke-width:1px, stroke-dasharray:none, stroke:#46EDC8, fill:#DEFFF8, color:#378E7A
          classDef ScriptInput stroke-width:1px, stroke-dasharray:none, stroke:#374D7C, fill:#E2EBFF, color:#374D7C
          classDef ScriptOutput stroke-width:1px, stroke-dasharray:none, stroke:#FBB35A, fill:#FFEFDB, color:#8F632D
  - text: |
      MulmoScript is a structured data which can be written either in JSON or YAML.
      Here is the "Hello World" in MulmoScript both in JSON and YAML.
    image:
      type: markdown
      markdown: |
        # Hello World in MulmoScript
        ### JSON
        ```json
        {
          "$mulmocast": {
            "version": "1.0",
          },
          "beats": [{
            "text": "Hello World." 
          }]
        }
        ```
        ### YAML 
        ```yaml
        $mulmocast:
          version: "1.0"
        beats:
          - text: "Hello World."
        ```
  - text: |
      Notice that this script has a property called 'beats'.
      Beats are the main building blocks of a MulmoCast.
      Each beat is like a 'slide' in a presentation, or a 'cut' in a movie.
      It can contain text, image, audio, video and more.
      This sample script has only one beat, which contains a single text, "Hello World."
      Therefore, MulmoCast will generate a video like this:
    image:
      type: markdown
      markdown: |
        # Hello World in MulmoScript
        ### JSON
        ```json
        {
          "$mulmocast": {
            "version": "1.0",
          },
          "beats": [{
            "text": "Hello World." 
          }]
        }
        ```
  - text: |
      Hello World
    image:
      type: image
      source:
        kind: url
        url: https://github.com/receptron/mulmocast-media/raw/refs/heads/main/tutorial/helloworld_auto.png
  - text: |
      Notice that MulmoCast generates an image as well as the audio.
      It will automatically generate an image based on the text.
    image:
      type: markdown
      markdown: |
        # Hello World in MulmoScript
        ### JSON
        ```json
        {
          "$mulmocast": {
            "version": "1.0",
          },
          "beats": [{
            "text": "Hello World." 
          }]
        }
        ```
  - text: |
      Optionally, you can specify the image prompt for that beat.
      MulmoCast will generate an image based on the prompt.
    image:
      type: markdown
      markdown: |
        # Hello World in MulmoScript
        ### JSON
        ```json
        {
          "$mulmocast": {
            "version": "1.0",
          },
          "beats": [{
            "text": "Hello World.",
            "imagePrompt": "A globe with the word 'Hello' on it."
          }]
        }
        ```
  - text: |
      This is the generated image with the image prompt, 
      a globe with the word 'Hello' on it.
    image:
      type: image
      source:
        kind: url
        url: https://github.com/receptron/mulmocast-media/raw/refs/heads/main/tutorial/helloworld_prompted.png
