// this test is generated by claude code.
import test from "node:test";
import assert from "node:assert";
import { imagePreprocessAgent } from "../../src/actions/image_agents.js";

import { createMockContext, createMockBeat } from "./utils.js";

test("imagePreprocessAgent - movie plugin", async () => {
  const context = createMockContext();
  const beat = createMockBeat({
    text: "Test beat text",
    image: {
      type: "movie",
      source: {
        kind: "path",
        path: "./upload_image/0/1757884027430.mov",
      },
    },
  });

  const result = await imagePreprocessAgent({
    context,
    beat,
    index: 1,
    imageRefs: {},
  });

  const expected = {
    imageParams: {
      provider: "openai",
      model: "dall-e-3",
      style: "natural",
      moderation: "auto",
    },
    movieFile: "/test/path/upload_image/0/1757884027430.mov",
    beatDuration: undefined,
    movieAgentInfo: { agent: "movieReplicateAgent", movieParams: {}, keyName: "REPLICATE_API_TOKEN" },
    imagePath: undefined,
    html:
      "\n" +
      '<div class="movie-container mb-6">\n' +
      '  <div class="relative w-full" style="padding-bottom: 56.25%; /* 16:9 aspect ratio */">\n' +
      "    <video\n" +
      '      class="absolute top-0 left-0 w-full h-full rounded-lg shadow-lg"\n' +
      "      controls\n" +
      '      preload="metadata"\n' +
      "    >\n" +
      '      <source src="/test/path/upload_image/0/1757884027430.mov" type="video/mp4">\n' +
      '      <source src="/test/path/upload_image/0/1757884027430.mov" type="video/webm">\n' +
      '      <source src="/test/path/upload_image/0/1757884027430.mov" type="video/ogg">\n' +
      "      Your browser does not support the video tag.\n" +
      "    </video>\n" +
      "  </div>\n" +
      "</div>",
    referenceImageForMovie: "/test/path/upload_image/0/1757884027430.mov",
  };
  assert.deepStrictEqual(result, expected);
});

test("imagePreprocessAgent - with image plugin (textSlide)", async () => {
  const context = createMockContext();
  const beat = createMockBeat({
    text: "Test beat text",
    image: {
      type: "textSlide",
      slide: {
        title: "3.0 second with no Audio",
      },
    },
  });

  const result = await imagePreprocessAgent({
    context,
    beat,
    index: 1,
    imageRefs: {},
  });

  const expected = {
    imageParams: {
      provider: "openai",
      model: "dall-e-3",
      style: "natural",
      moderation: "auto",
    },
    movieFile: undefined,
    beatDuration: undefined,
    movieAgentInfo: { agent: "movieReplicateAgent", movieParams: {}, keyName: "REPLICATE_API_TOKEN" },
    markdown: "# 3.0 second with no Audio\n",
    html: "<h1>3.0 second with no Audio</h1>\n",
    imagePath: "/test/images/test_studio/1p.png",
    referenceImageForMovie: "/test/images/test_studio/1p.png",
  };
  assert.deepStrictEqual(result, expected);
});

test("imagePreprocessAgent - with image plugin (markdown)", async () => {
  const context = createMockContext();
  const beat = createMockBeat({
    text: "Test beat text",
    image: {
      type: "markdown",
      markdown: ["## Chapter 2", "- Hello", "- World"],
    },
  });
  const result = await imagePreprocessAgent({
    context,
    beat,
    index: 1,
    imageRefs: {},
  });

  const expected = {
    imageParams: {
      provider: "openai",
      model: "dall-e-3",
      style: "natural",
      moderation: "auto",
    },
    movieFile: undefined,
    beatDuration: undefined,
    movieAgentInfo: { agent: "movieReplicateAgent", movieParams: {}, keyName: "REPLICATE_API_TOKEN" },
    html: "<h2>Chapter 2</h2>\n<ul>\n<li>Hello</li>\n<li>World</li>\n</ul>\n",
    markdown: "## Chapter 2\n- Hello\n- World",
    imagePath: "/test/images/test_studio/1p.png",
    referenceImageForMovie: "/test/images/test_studio/1p.png",
  };
  assert.deepStrictEqual(result, expected);
});

test("imagePreprocessAgent - with image plugin (chart)", async () => {
  const context = createMockContext();
  const beat = createMockBeat({
    text: "Test beat text",
    image: {
      type: "chart",
      title: "A sample pie chart",
      chartData: {
        type: "pie",
        data: {
          labels: ["OpenAIと投資家の取り分", "マイクロソフトの取り分"],
          datasets: [
            {
              data: [90, 10],
              backgroundColor: ["rgba(75, 192, 192, 0.5)", "rgba(54, 162, 235, 0.5)"],
              borderColor: ["rgba(75, 192, 192, 1)", "rgba(54, 162, 235, 1)"],
              borderWidth: 1,
            },
          ],
        },
        options: {
          responsive: true,
          animation: false,
          plugins: {
            legend: {
              position: "bottom",
            },
          },
        },
      },
    },
  });

  const result = await imagePreprocessAgent({
    context,
    beat,
    index: 1,
    imageRefs: {},
  });
  const expected = {
    imageParams: {
      provider: "openai",
      model: "dall-e-3",
      style: "natural",
      moderation: "auto",
    },
    movieFile: undefined,
    beatDuration: undefined,
    movieAgentInfo: { agent: "movieReplicateAgent", movieParams: {}, keyName: "REPLICATE_API_TOKEN" },
    imagePath: "/test/images/test_studio/1p.png",
    referenceImageForMovie: "/test/images/test_studio/1p.png",
    html:
      "\n" +
      '<div class="chart-container mb-6">\n' +
      '  <h3 class="text-xl font-semibold mb-4">A sample pie chart</h3>\n' +
      '  <div class="w-full" style="position: relative; height: 400px;">\n' +
      '    <canvas id="id"></canvas>\n' +
      "  </div>\n" +
      "  <script>\n" +
      "    (function() {\n" +
      "      const ctx = document.getElementById('id').getContext('2d');\n" +
      "      new Chart(ctx, {\n" +
      '  "type": "pie",\n' +
      '  "data": {\n' +
      '    "labels": [\n' +
      '      "OpenAIと投資家の取り分",\n' +
      '      "マイクロソフトの取り分"\n' +
      "    ],\n" +
      '    "datasets": [\n' +
      "      {\n" +
      '        "data": [\n' +
      "          90,\n" +
      "          10\n" +
      "        ],\n" +
      '        "backgroundColor": [\n' +
      '          "rgba(75, 192, 192, 0.5)",\n' +
      '          "rgba(54, 162, 235, 0.5)"\n' +
      "        ],\n" +
      '        "borderColor": [\n' +
      '          "rgba(75, 192, 192, 1)",\n' +
      '          "rgba(54, 162, 235, 1)"\n' +
      "        ],\n" +
      '        "borderWidth": 1\n' +
      "      }\n" +
      "    ]\n" +
      "  },\n" +
      '  "options": {\n' +
      '    "responsive": true,\n' +
      '    "animation": false,\n' +
      '    "plugins": {\n' +
      '      "legend": {\n' +
      '        "position": "bottom"\n' +
      "      }\n" +
      "    }\n" +
      "  }\n" +
      "});\n" +
      "    })();\n" +
      "  </script>\n" +
      "</div>",
  };

  assert.deepStrictEqual(result, expected);
});

test("imagePreprocessAgent - with image plugin (mermaid)", async () => {
  // Skip this test as it requires complex file system setup and Mermaid rendering
  const context = createMockContext();
  const beat = createMockBeat({
    text: "Test beat text",
    image: {
      type: "mermaid",
      title: "Business Process Flow",
      code: {
        kind: "text",
        text: "graph LR\n    A[Market Research] --> B[Product Planning]\n    B --> C[Development]\n    C --> D[Testing]\n    D --> E[Manufacturing]\n    E --> F[Marketing]\n    F --> G[Sales]\n    G --> H[Customer Support]\n    H --> A",
      },
    },
  });
  const result = await imagePreprocessAgent({
    context,
    beat,
    index: 1,
    imageRefs: {},
  });

  const expected = {
    imageParams: {
      provider: "openai",
      model: "dall-e-3",
      style: "natural",
      moderation: "auto",
    },
    movieFile: undefined,
    beatDuration: undefined,
    movieAgentInfo: { agent: "movieReplicateAgent", movieParams: {}, keyName: "REPLICATE_API_TOKEN" },
    markdown:
      "```mermaid\n" +
      "graph LR\n" +
      "    A[Market Research] --> B[Product Planning]\n" +
      "    B --> C[Development]\n" +
      "    C --> D[Testing]\n" +
      "    D --> E[Manufacturing]\n" +
      "    E --> F[Marketing]\n" +
      "    F --> G[Sales]\n" +
      "    G --> H[Customer Support]\n" +
      "    H --> A\n" +
      "```",
    html:
      "\n" +
      '<div class="mermaid-container mb-6">\n' +
      '  <h3 class="text-xl font-semibold mb-4">Business Process Flow</h3>\n' +
      '  <div class="flex justify-center">\n' +
      '    <div id="id" class="mermaid">\n' +
      "      graph LR\n" +
      "    A[Market Research] --> B[Product Planning]\n" +
      "    B --> C[Development]\n" +
      "    C --> D[Testing]\n" +
      "    D --> E[Manufacturing]\n" +
      "    E --> F[Marketing]\n" +
      "    F --> G[Sales]\n" +
      "    G --> H[Customer Support]\n" +
      "    H --> A\n" +
      "    </div>\n" +
      "  </div>\n" +
      "</div>",
    imagePath: "/test/images/test_studio/1p.png",
    referenceImageForMovie: "/test/images/test_studio/1p.png",
  };

  assert.deepStrictEqual(result, expected);
});
