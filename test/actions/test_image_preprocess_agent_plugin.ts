// this test is generated by claude code.
import test from "node:test";
import assert from "node:assert";
import type { MulmoStudioContext, MulmoBeat } from "../../src/types/index.js";
import { imagePreprocessAgent } from "../../src/actions/image_agents.js";

import { createMockContext, createMockBeat } from "./utils.js";

test("imagePreprocessAgent - movie plugin", async () => {
  const context = createMockContext();
  const beat = createMockBeat({
    text: "Test beat text",
    image: {
      type: "movie",
      source: {
        kind: "path",
        path: "./upload_image/0/1757884027430.mov",
      },
    },
  });

  const result = await imagePreprocessAgent({
    context,
    beat,
    index: 1,
    imageRefs: {},
  });

  const expected = {
    imageParams: {
      provider: "openai",
      model: "dall-e-3",
      style: "natural",
      moderation: "auto",
    },
    movieFile: "/test/path/upload_image/0/1757884027430.mov",
    beatDuration: undefined,
    movieAgentInfo: { agent: "movieReplicateAgent", movieParams: {} },
    imagePath: undefined,
    referenceImageForMovie: "/test/path/upload_image/0/1757884027430.mov",
  };
  assert.deepStrictEqual(result, expected);
});

test.skip("imagePreprocessAgent - with image plugin (textSlide)", async () => {
  // Skip this test as it requires complex file system setup and Puppeteer
  // The plugin functionality is tested in the actual integration tests
});

test.skip("imagePreprocessAgent - with image plugin (markdown)", async () => {
  // Skip this test as it requires complex file system setup and Puppeteer
});

test.skip("imagePreprocessAgent - with image plugin (chart)", async () => {
  // Skip this test as it requires complex file system setup and Chart.js
});

test.skip("imagePreprocessAgent - with image plugin (mermaid)", async () => {
  // Skip this test as it requires complex file system setup and Mermaid rendering
});
